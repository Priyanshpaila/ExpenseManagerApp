import 'dart:typed_data';
import 'package:intl/intl.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:my_app_one/features/expense_manager/model/expense_model.dart';

Future<Uint8List> generateExpensePdf({
  required List<ExpenseModel> expenses,
  required double budget,
  required int month,
  required int year,
}) async {
  final pdf = pw.Document();
  final formatter = DateFormat('dd MMM yyyy');
  final monthName = DateFormat('MMMM yyyy').format(DateTime(year, month));

  final totalSpent = expenses.fold<double>(0, (sum, e) => sum + e.amount);
  final remaining = budget - totalSpent;

  final currency = (double value) => 'Rs.${value.toStringAsFixed(2)}';

  final baseText = pw.TextStyle(fontSize: 12);
  final headerText = pw.TextStyle(fontSize: 16, fontWeight: pw.FontWeight.bold);
  final bold = pw.TextStyle(fontWeight: pw.FontWeight.bold);

  pdf.addPage(
    pw.MultiPage(
      pageFormat: PdfPageFormat.a4,
      margin: const pw.EdgeInsets.all(32),
      build:
          (context) => [
            /// 🏷️ Title
            pw.Text(
              'Expense Report',
              style: pw.TextStyle(fontSize: 24, fontWeight: pw.FontWeight.bold),
            ),
            pw.Text(
              monthName,
              style: pw.TextStyle(fontSize: 14, color: PdfColors.grey700),
            ),
            pw.Divider(),

            /// 💼 Summary Section
            pw.Container(
              padding: const pw.EdgeInsets.symmetric(vertical: 10),
              decoration: pw.BoxDecoration(
                borderRadius: pw.BorderRadius.circular(8),
                color: PdfColors.grey100,
              ),
              child: pw.Column(
                crossAxisAlignment: pw.CrossAxisAlignment.start,
                children: [
                  pw.Text('Budget Overview:', style: headerText),
                  pw.SizedBox(height: 6),
                  pw.Row(
                    mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
                    children: [
                      pw.Text('Budget:', style: bold),
                      pw.Text(currency(budget), style: baseText),
                    ],
                  ),
                  pw.Row(
                    mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
                    children: [
                      pw.Text('Total Spent:', style: bold),
                      pw.Text(
                        currency(totalSpent),
                        style: baseText.copyWith(color: PdfColors.red800),
                      ),
                    ],
                  ),
                  pw.Row(
                    mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
                    children: [
                      pw.Text('Remaining:', style: bold),
                      pw.Text(
                        currency(remaining),
                        style: baseText.copyWith(
                          color:
                              remaining >= 0
                                  ? PdfColors.green800
                                  : PdfColors.red,
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),

            pw.SizedBox(height: 20),

            /// 📋 Expense Table
            pw.Text('Expenses', style: headerText),
            pw.SizedBox(height: 8),
            pw.Table.fromTextArray(
              headers: ['Date', 'Description', 'Category', 'Amount'],
              headerStyle: pw.TextStyle(
                fontWeight: pw.FontWeight.bold,
                color: PdfColors.white,
              ),
              headerDecoration: const pw.BoxDecoration(
                color: PdfColors.teal700,
              ),
              rowDecoration: const pw.BoxDecoration(
                border: pw.Border(
                  bottom: pw.BorderSide(color: PdfColors.grey300),
                ),
              ),
              cellStyle: baseText,
              cellPadding: const pw.EdgeInsets.symmetric(
                vertical: 6,
                horizontal: 4,
              ),
              data:
                  expenses.map((e) {
                    return [
                      formatter.format(e.date),
                      e.description,
                      e.category,
                      currency(e.amount),
                    ];
                  }).toList(),
            ),

            /// Footer
            pw.SizedBox(height: 40),
            pw.Center(
              child: pw.Text(
                'Generated by Expense Manager  © Priyansh',
                style: pw.TextStyle(fontSize: 10, color: PdfColors.grey500),
              ),
            ),
          ],
    ),
  );

  return pdf.save();
}
